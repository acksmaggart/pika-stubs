from pika import amqp_object as amqp_object, exceptions as exceptions, spec as spec
from pika.compat import byte as byte
from typing import Any, Optional

LOGGER: Any

class Frame(amqp_object.AMQPObject):
    NAME: str = ...
    frame_type: Any = ...
    channel_number: Any = ...
    def __init__(self, frame_type: Any, channel_number: Any) -> None: ...
    def marshal(self) -> None: ...

class Method(Frame):
    NAME: str = ...
    method: Any = ...
    def __init__(self, channel_number: Any, method: Any) -> None: ...
    def marshal(self): ...

class Header(Frame):
    NAME: str = ...
    body_size: Any = ...
    properties: Any = ...
    def __init__(self, channel_number: Any, body_size: Any, props: Any) -> None: ...
    def marshal(self): ...

class Body(Frame):
    NAME: str = ...
    fragment: Any = ...
    def __init__(self, channel_number: Any, fragment: Any) -> None: ...
    def marshal(self): ...

class Heartbeat(Frame):
    NAME: str = ...
    def __init__(self) -> None: ...
    def marshal(self): ...

class ProtocolHeader(amqp_object.AMQPObject):
    NAME: str = ...
    frame_type: int = ...
    major: Any = ...
    minor: Any = ...
    revision: Any = ...
    def __init__(self, major: Optional[Any] = ..., minor: Optional[Any] = ..., revision: Optional[Any] = ...) -> None: ...
    def marshal(self): ...

def decode_frame(data_in: Any): ...
