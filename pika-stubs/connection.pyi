import abc
import pika.validators
from pika.compat import dict_iteritems as dict_iteritems, dict_itervalues as dict_itervalues, dictkeys as dictkeys, url_unquote as url_unquote, xrange as xrange
from typing import Any, Optional

PRODUCT: str
LOGGER: Any

class Parameters:
    DEFAULT_USERNAME: str = ...
    DEFAULT_PASSWORD: str = ...
    DEFAULT_BLOCKED_CONNECTION_TIMEOUT: Any = ...
    DEFAULT_CHANNEL_MAX: Any = ...
    DEFAULT_CLIENT_PROPERTIES: Any = ...
    DEFAULT_CREDENTIALS: Any = ...
    DEFAULT_CONNECTION_ATTEMPTS: int = ...
    DEFAULT_FRAME_MAX: Any = ...
    DEFAULT_HEARTBEAT_TIMEOUT: Any = ...
    DEFAULT_HOST: str = ...
    DEFAULT_LOCALE: str = ...
    DEFAULT_PORT: int = ...
    DEFAULT_RETRY_DELAY: float = ...
    DEFAULT_SOCKET_TIMEOUT: float = ...
    DEFAULT_STACK_TIMEOUT: float = ...
    DEFAULT_SSL: bool = ...
    DEFAULT_SSL_OPTIONS: Any = ...
    DEFAULT_SSL_PORT: int = ...
    DEFAULT_VIRTUAL_HOST: str = ...
    DEFAULT_TCP_OPTIONS: Any = ...
    def __init__(self) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @property
    def blocked_connection_timeout(self): ...
    @blocked_connection_timeout.setter
    def blocked_connection_timeout(self, value: Any) -> None: ...
    @property
    def channel_max(self): ...
    @channel_max.setter
    def channel_max(self, value: Any) -> None: ...
    @property
    def client_properties(self): ...
    @client_properties.setter
    def client_properties(self, value: Any) -> None: ...
    @property
    def connection_attempts(self): ...
    @connection_attempts.setter
    def connection_attempts(self, value: Any) -> None: ...
    @property
    def credentials(self): ...
    @credentials.setter
    def credentials(self, value: Any) -> None: ...
    @property
    def frame_max(self): ...
    @frame_max.setter
    def frame_max(self, value: Any) -> None: ...
    @property
    def heartbeat(self): ...
    @heartbeat.setter
    def heartbeat(self, value: Any) -> None: ...
    @property
    def host(self): ...
    @host.setter
    def host(self, value: Any) -> None: ...
    @property
    def locale(self): ...
    @locale.setter
    def locale(self, value: Any) -> None: ...
    @property
    def port(self): ...
    @port.setter
    def port(self, value: Any) -> None: ...
    @property
    def retry_delay(self): ...
    @retry_delay.setter
    def retry_delay(self, value: Any) -> None: ...
    @property
    def socket_timeout(self): ...
    @socket_timeout.setter
    def socket_timeout(self, value: Any) -> None: ...
    @property
    def stack_timeout(self): ...
    @stack_timeout.setter
    def stack_timeout(self, value: Any) -> None: ...
    @property
    def ssl_options(self): ...
    @ssl_options.setter
    def ssl_options(self, value: Any) -> None: ...
    @property
    def virtual_host(self): ...
    @virtual_host.setter
    def virtual_host(self, value: Any) -> None: ...
    @property
    def tcp_options(self): ...
    @tcp_options.setter
    def tcp_options(self, value: Any) -> None: ...

class ConnectionParameters(Parameters):
    class _DEFAULT: ...
    blocked_connection_timeout: Any = ...
    channel_max: Any = ...
    client_properties: Any = ...
    connection_attempts: Any = ...
    credentials: Any = ...
    frame_max: Any = ...
    heartbeat: Any = ...
    host: Any = ...
    locale: Any = ...
    retry_delay: Any = ...
    socket_timeout: Any = ...
    stack_timeout: Any = ...
    ssl_options: Any = ...
    port: Any = ...
    virtual_host: Any = ...
    tcp_options: Any = ...
    def __init__(self, host: Any = ..., port: Any = ..., virtual_host: Any = ..., credentials: Any = ..., channel_max: Any = ..., frame_max: Any = ..., heartbeat: Any = ..., ssl_options: Any = ..., connection_attempts: Any = ..., retry_delay: Any = ..., socket_timeout: Any = ..., stack_timeout: Any = ..., locale: Any = ..., blocked_connection_timeout: Any = ..., client_properties: Any = ..., tcp_options: Any = ..., **kwargs: Any) -> None: ...

class URLParameters(Parameters):
    ssl_options: Any = ...
    host: Any = ...
    port: Any = ...
    credentials: Any = ...
    virtual_host: Any = ...
    def __init__(self, url: Any) -> None: ...

class SSLOptions:
    context: Any = ...
    server_hostname: Any = ...
    def __init__(self, context: Any, server_hostname: Optional[Any] = ...) -> None: ...

class Connection(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    ON_CONNECTION_CLOSED: str = ...
    ON_CONNECTION_ERROR: str = ...
    ON_CONNECTION_OPEN_OK: str = ...
    CONNECTION_CLOSED: int = ...
    CONNECTION_INIT: int = ...
    CONNECTION_PROTOCOL: int = ...
    CONNECTION_START: int = ...
    CONNECTION_TUNE: int = ...
    CONNECTION_OPEN: int = ...
    CONNECTION_CLOSING: int = ...
    connection_state: Any = ...
    params: Any = ...
    callbacks: Any = ...
    server_capabilities: Any = ...
    server_properties: Any = ...
    known_hosts: Any = ...
    def __init__(self, parameters: Optional[Any] = ..., on_open_callback: Optional[Any] = ..., on_open_error_callback: Optional[Any] = ..., on_close_callback: Optional[Any] = ..., internal_connection_workflow: bool = ...) -> None: ...
    def add_on_close_callback(self, callback: Any) -> None: ...
    def add_on_connection_blocked_callback(self, callback: Any) -> None: ...
    def add_on_connection_unblocked_callback(self, callback: Any) -> None: ...
    def add_on_open_callback(self, callback: Any) -> None: ...
    def add_on_open_error_callback(self, callback: Any, remove_default: bool = ...) -> None: ...
    def channel(self, channel_number: Optional[Any] = ..., on_open_callback: Optional[Any] = ...): ...
    def close(self, reply_code: int = ..., reply_text: str = ...) -> None: ...
    @property
    def is_closed(self): ...
    @property
    def is_closing(self): ...
    @property
    def is_open(self): ...
    @property
    def basic_nack(self): ...
    @property
    def consumer_cancel_notify(self): ...
    @property
    def exchange_exchange_bindings(self): ...
    @property
    def publisher_confirms(self): ...
