import abc
from pika import connection as connection
from pika.adapters.utils import connection_workflow as connection_workflow, nbio_interface as nbio_interface
from typing import Any, Optional

LOGGER: Any

class BaseConnection(connection.Connection, metaclass=abc.ABCMeta):
    def __init__(self, parameters: Any, on_open_callback: Any, on_open_error_callback: Any, on_close_callback: Any, nbio: Any, internal_connection_workflow: Any) -> None: ...
    @classmethod
    @abc.abstractmethod
    def create_connection(cls, connection_configs: Any, on_done: Any, custom_ioloop: Optional[Any] = ..., workflow: Optional[Any] = ...) -> Any: ...
    @property
    def ioloop(self): ...

class _StreamingProtocolShim(nbio_interface.AbstractStreamProtocol):
    connection_made: Any = ...
    connection_lost: Any = ...
    eof_received: Any = ...
    data_received: Any = ...
    conn: Any = ...
    def __init__(self, conn: Any) -> None: ...
    def __getattr__(self, attr: Any): ...
