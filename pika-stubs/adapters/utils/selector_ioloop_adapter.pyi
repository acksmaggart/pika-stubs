import abc
from pika.adapters.utils import io_services_utils as io_services_utils, nbio_interface as nbio_interface
from pika.adapters.utils.io_services_utils import check_callback_arg as check_callback_arg, check_fd_arg as check_fd_arg
from typing import Any, Optional

LOGGER: Any

class AbstractSelectorIOLoop(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def READ(self) -> Any: ...
    @property
    @abc.abstractmethod
    def WRITE(self) -> Any: ...
    @property
    @abc.abstractmethod
    def ERROR(self) -> Any: ...
    @abc.abstractmethod
    def close(self) -> Any: ...
    @abc.abstractmethod
    def start(self) -> Any: ...
    @abc.abstractmethod
    def stop(self) -> Any: ...
    @abc.abstractmethod
    def call_later(self, delay: Any, callback: Any) -> Any: ...
    @abc.abstractmethod
    def remove_timeout(self, timeout_handle: Any) -> Any: ...
    @abc.abstractmethod
    def add_callback(self, callback: Any) -> Any: ...
    @abc.abstractmethod
    def add_handler(self, fd: Any, handler: Any, events: Any) -> Any: ...
    @abc.abstractmethod
    def update_handler(self, fd: Any, events: Any) -> Any: ...
    @abc.abstractmethod
    def remove_handler(self, fd: Any) -> Any: ...

class SelectorIOServicesAdapter(io_services_utils.SocketConnectionMixin, io_services_utils.StreamingConnectionMixin, nbio_interface.AbstractIOServices, nbio_interface.AbstractFileDescriptorServices):
    def __init__(self, native_loop: Any) -> None: ...
    def get_native_ioloop(self): ...
    def close(self) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...
    def add_callback_threadsafe(self, callback: Any) -> None: ...
    def call_later(self, delay: Any, callback: Any): ...
    def getaddrinfo(self, host: Any, port: Any, on_done: Any, family: int = ..., socktype: int = ..., proto: int = ..., flags: int = ...): ...
    def set_reader(self, fd: Any, on_readable: Any) -> None: ...
    def remove_reader(self, fd: Any): ...
    def set_writer(self, fd: Any, on_writable: Any) -> None: ...
    def remove_writer(self, fd: Any): ...

class _FileDescriptorCallbacks:
    reader: Any = ...
    writer: Any = ...
    def __init__(self, reader: Optional[Any] = ..., writer: Optional[Any] = ...) -> None: ...

class _TimerHandle(nbio_interface.AbstractTimerReference):
    def __init__(self, handle: Any, loop: Any) -> None: ...
    def cancel(self) -> None: ...

class _SelectorIOLoopIOHandle(nbio_interface.AbstractIOReference):
    def __init__(self, subject: Any) -> None: ...
    def cancel(self): ...

class _AddressResolver:
    NOT_STARTED: int = ...
    ACTIVE: int = ...
    CANCELED: int = ...
    COMPLETED: int = ...
    def __init__(self, native_loop: Any, host: Any, port: Any, family: Any, socktype: Any, proto: Any, flags: Any, on_done: Any) -> None: ...
    def start(self): ...
    def cancel(self): ...
