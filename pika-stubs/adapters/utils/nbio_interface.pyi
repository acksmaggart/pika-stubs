import abc
import pika.compat
from typing import Any, Optional

class AbstractIOServices(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get_native_ioloop(self) -> Any: ...
    @abc.abstractmethod
    def close(self) -> Any: ...
    @abc.abstractmethod
    def run(self) -> Any: ...
    @abc.abstractmethod
    def stop(self) -> Any: ...
    @abc.abstractmethod
    def add_callback_threadsafe(self, callback: Any) -> Any: ...
    @abc.abstractmethod
    def call_later(self, delay: Any, callback: Any) -> Any: ...
    @abc.abstractmethod
    def getaddrinfo(self, host: Any, port: Any, on_done: Any, family: int = ..., socktype: int = ..., proto: int = ..., flags: int = ...) -> Any: ...
    @abc.abstractmethod
    def connect_socket(self, sock: Any, resolved_addr: Any, on_done: Any) -> Any: ...
    @abc.abstractmethod
    def create_streaming_connection(self, protocol_factory: Any, sock: Any, on_done: Any, ssl_context: Optional[Any] = ..., server_hostname: Optional[Any] = ...) -> Any: ...

class AbstractFileDescriptorServices(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def set_reader(self, fd: Any, on_readable: Any) -> Any: ...
    @abc.abstractmethod
    def remove_reader(self, fd: Any) -> Any: ...
    @abc.abstractmethod
    def set_writer(self, fd: Any, on_writable: Any) -> Any: ...
    @abc.abstractmethod
    def remove_writer(self, fd: Any) -> Any: ...

class AbstractTimerReference(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def cancel(self) -> Any: ...

class AbstractIOReference(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def cancel(self) -> Any: ...

class AbstractStreamProtocol(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def connection_made(self, transport: Any) -> Any: ...
    @abc.abstractmethod
    def connection_lost(self, error: Any) -> Any: ...
    @abc.abstractmethod
    def eof_received(self) -> Any: ...
    @abc.abstractmethod
    def data_received(self, data: Any) -> Any: ...

class AbstractStreamTransport(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def abort(self) -> Any: ...
    @abc.abstractmethod
    def get_protocol(self) -> Any: ...
    @abc.abstractmethod
    def write(self, data: Any) -> Any: ...
    @abc.abstractmethod
    def get_write_buffer_size(self) -> Any: ...
