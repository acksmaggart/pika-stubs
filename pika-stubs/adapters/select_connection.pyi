import abc
import pika.compat
from pika.adapters.base_connection import BaseConnection as BaseConnection
from pika.adapters.utils import nbio_interface as nbio_interface
from pika.adapters.utils.selector_ioloop_adapter import AbstractSelectorIOLoop as AbstractSelectorIOLoop, SelectorIOServicesAdapter as SelectorIOServicesAdapter
from typing import Any, Optional

LOGGER: Any
SELECT_TYPE: Any

class SelectConnection(BaseConnection):
    def __init__(self, parameters: Optional[Any] = ..., on_open_callback: Optional[Any] = ..., on_open_error_callback: Optional[Any] = ..., on_close_callback: Optional[Any] = ..., custom_ioloop: Optional[Any] = ..., internal_connection_workflow: bool = ...) -> None: ...
    @classmethod
    def create_connection(cls, connection_configs: Any, on_done: Any, custom_ioloop: Optional[Any] = ..., workflow: Optional[Any] = ...): ...

class _Timeout:
    deadline: Any = ...
    callback: Any = ...
    def __init__(self, deadline: Any, callback: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class _Timer:
    def __init__(self) -> None: ...
    def close(self) -> None: ...
    def call_later(self, delay: Any, callback: Any): ...
    def remove_timeout(self, timeout: Any) -> None: ...
    def get_remaining_interval(self): ...
    def process_timeouts(self) -> None: ...

class PollEvents:
    READ: Any = ...
    WRITE: Any = ...
    ERROR: Any = ...

class IOLoop(AbstractSelectorIOLoop):
    READ: Any = ...
    WRITE: Any = ...
    ERROR: Any = ...
    def __init__(self) -> None: ...
    def close(self) -> None: ...
    def call_later(self, delay: Any, callback: Any): ...
    def remove_timeout(self, timeout_handle: Any) -> None: ...
    def add_callback_threadsafe(self, callback: Any) -> None: ...
    add_callback: Any = ...
    def process_timeouts(self) -> None: ...
    def add_handler(self, fd: Any, handler: Any, events: Any) -> None: ...
    def update_handler(self, fd: Any, events: Any) -> None: ...
    def remove_handler(self, fd: Any) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def activate_poller(self) -> None: ...
    def deactivate_poller(self) -> None: ...
    def poll(self) -> None: ...

class _PollerBase(pika.compat.AbstractBase, metaclass=abc.ABCMeta):
    POLL_TIMEOUT_MULT: int = ...
    def __init__(self, get_wait_seconds: Any, process_timeouts: Any) -> None: ...
    def close(self) -> None: ...
    def wake_threadsafe(self) -> None: ...
    def add_handler(self, fileno: Any, handler: Any, events: Any) -> None: ...
    def update_handler(self, fileno: Any, events: Any) -> None: ...
    def remove_handler(self, fileno: Any) -> None: ...
    def activate_poller(self) -> None: ...
    def deactivate_poller(self) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    @abc.abstractmethod
    def poll(self) -> Any: ...

class SelectPoller(_PollerBase):
    POLL_TIMEOUT_MULT: int = ...
    def poll(self) -> None: ...

class KQueuePoller(_PollerBase):
    def __init__(self, get_wait_seconds: Any, process_timeouts: Any) -> None: ...
    def poll(self) -> None: ...

class PollPoller(_PollerBase):
    POLL_TIMEOUT_MULT: int = ...
    def __init__(self, get_wait_seconds: Any, process_timeouts: Any) -> None: ...
    def poll(self) -> None: ...

class EPollPoller(PollPoller):
    POLL_TIMEOUT_MULT: int = ...
